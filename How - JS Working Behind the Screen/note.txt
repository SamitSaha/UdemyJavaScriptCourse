js is a 

high-level,
mulit-paradigm, => procedural programming, oop, functional programming (FP). => imperative & declarative 
interpreted or just in time complied, 
dynamic,
single threaded, 
garbage-collected -> programming language
first class functions  
non blocking event loop -> takes long running tasks and executes them in the background and puts them back in the main thread once they are finished. 
concurrency model -> js runs in one single thread so it can only do one thing at a time.
long running task -> it would block the songle thread. wan want non-blocking behavior. 

compilation -> entire code is converted into machine code at once and written to a binary file that can be executed by a computer.  (execution can happen after compliation.)
interpretation -> interpreter runs through the source code and excutes it line by line.  (code still need to be converted to Machine code.)
just in time (Jit) compilation -> entire code is converted into machine code at once and the execute immediately. (execution happen immediately.)

JS ENGINE => 

Scoping and scope in js => 

    scope is the place in our code where variables are declared.
    variables are the same thing is true for functions. functions are the values which stores into variables.

1. Scoping -> how our programns variables are organized and accessed. - "where do variables live or where can we access an certain variables and where not ?" 
2. lexial scoping -> the way variables are organized and accessed is entirely controlled bu the placement of function and of blocks in the programns code.
3. scope -> space or environment in which a certain cariable is declared (variable enviroment in case of functions). there is global scope, function scope, an block scope. 
4. Scope of a variable -> the entire region of our code, where a certain variable can be accessed.
5. There are three types of SCOPE in JS. 
 a. global scope. -> top level code. vari declared in global scope. 
 b. function scope. -> function codes are created inside function scope. also called local scope. 
 c. block scope (ES6). -> variables are only accessible only inside block. it is applied to let and const variables. functions are also block scope.

Scope Chain => 
    const name = 'Samit';
    function first(){
        if ( age >= 30){
            const decade = 3 ; 
            var millenial = true ;
        }
        function second (){
            const job = 'teacher' ;
            console.log(`${name} is a ${age} old ${job}`);
        }
        second();
    }
    first();

/////////////////////////////////////////////////////////

Hoisting in Javascript => 
makes some types of variables accesible/ usable in the code before they are actually declared. "variables lifted to the top of their scope."
before exeution code is scanner for variable declarations, and for each variables, a new property in created in the variable enviroment object.

Temporal Dead Zone - TDZ for job variable. 

/////////////////////////////////////////////////////

The this keyword =>
created for every execution context . take the value of (points to ) the "owner" of the function in which this keyword used. 
